image: python:3.10

stages:
  - test
  - build
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2

# Cache pip dependencies between jobs
cache:
  paths:
    - .pip-cache/

# Test stage
pytest:
  stage: test
  services:
    - name: postgres:14
      alias: postgres
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_HOST_AUTH_METHOD: trust
    # Use a dedicated test database URL
    DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/test_db
    # Other test variables
    API_SECRET_KEY: test_secret_key
    OPENAI_API_KEY: dummy_key_for_tests
    SERPAPI_KEY: dummy_key_for_tests
    REDIS_URL: redis://redis:6379/0
    TWITTER_NITTER_BASE_URL: https://nitter.net
  before_script:
    - pip install -r requirements.txt
    - pip install -r tests/requirements-test.txt
  script:
    - pytest tests/ -v --cov=backend

lint:
  stage: test
  before_script:
    - pip install flake8
  script:
    - flake8 backend

# Build stage for Docker images
build_image:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  only:
    - main
    - staging

# Deploy stages for different environments
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$STAGING_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$STAGING_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $STAGING_SSH_USER@$STAGING_SSH_HOST "cd /path/to/project && docker-compose pull && docker-compose up -d"
  only:
    - staging
  environment:
    name: staging
    url: https://staging.example.com

deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$PRODUCTION_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$PRODUCTION_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $PRODUCTION_SSH_USER@$PRODUCTION_SSH_HOST "cd /path/to/project && docker-compose pull && docker-compose up -d"
  only:
    - main
  environment:
    name: production
    url: https://example.com
  when: manual  # Require manual approval for production deployment 